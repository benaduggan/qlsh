//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/rszemplinski/projects/dotnet/QLShell/QL.Parser/QL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class QLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LOCAL=1, REMOTE=2, WS=3, COMMENT=4, LINE_TERMINATOR=5, UNICODE_SCALAR_VALUE_HEX=6, 
		LETTERS=7, EXP=8, HEX=9, UNICODE=10, ESC=11, NAME_START=12, NAME=13, BOOLEAN=14, 
		NULL=15, STRING=16, NUMBER=17, FLOAT=18, FRACTIONAL=19, EXPONENT=20, INT=21, 
		VARIABLE=22, COLON=23, LPAREN=24, RPAREN=25, LBRACE=26, RBRACE=27, LBRACK=28, 
		RBRACK=29, PIPE=30, COMMA=31;
	public const int
		RULE_document = 0, RULE_action_type = 1, RULE_action_block = 2, RULE_context_blocks = 3, 
		RULE_context_block = 4, RULE_local_context_block = 5, RULE_remote_context_block = 6, 
		RULE_selection_set = 7, RULE_selection = 8, RULE_field = 9, RULE_args = 10, 
		RULE_arg = 11, RULE_transformations = 12, RULE_transformation = 13, RULE_value = 14, 
		RULE_list = 15, RULE_object_field = 16, RULE_object = 17;
	public static readonly string[] ruleNames = {
		"document", "action_type", "action_block", "context_blocks", "context_block", 
		"local_context_block", "remote_context_block", "selection_set", "selection", 
		"field", "args", "arg", "transformations", "transformation", "value", 
		"list", "object_field", "object"
	};

	private static readonly string[] _LiteralNames = {
		null, "'local'", "'remote'", null, null, null, null, null, null, null, 
		null, null, null, null, null, "'null'", null, null, null, null, null, 
		null, null, "':'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'|'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LOCAL", "REMOTE", "WS", "COMMENT", "LINE_TERMINATOR", "UNICODE_SCALAR_VALUE_HEX", 
		"LETTERS", "EXP", "HEX", "UNICODE", "ESC", "NAME_START", "NAME", "BOOLEAN", 
		"NULL", "STRING", "NUMBER", "FLOAT", "FRACTIONAL", "EXPONENT", "INT", 
		"VARIABLE", "COLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
		"RBRACK", "PIPE", "COMMA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Action_blockContext action_block() {
			return GetRuleContext<Action_blockContext>(0);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			action_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLParser.NAME, 0); }
		public Action_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Action_typeContext action_type() {
		Action_typeContext _localctx = new Action_typeContext(Context, State);
		EnterRule(_localctx, 2, RULE_action_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Action_typeContext action_type() {
			return GetRuleContext<Action_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(QLParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Context_blocksContext context_blocks() {
			return GetRuleContext<Context_blocksContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(QLParser.RBRACE, 0); }
		public Action_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Action_blockContext action_block() {
		Action_blockContext _localctx = new Action_blockContext(Context, State);
		EnterRule(_localctx, 4, RULE_action_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			action_type();
			State = 41;
			Match(LBRACE);
			State = 42;
			context_blocks();
			State = 43;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Context_blocksContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Context_blockContext[] context_block() {
			return GetRuleContexts<Context_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Context_blockContext context_block(int i) {
			return GetRuleContext<Context_blockContext>(i);
		}
		public Context_blocksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context_blocks; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContext_blocks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Context_blocksContext context_blocks() {
		Context_blocksContext _localctx = new Context_blocksContext(Context, State);
		EnterRule(_localctx, 6, RULE_context_blocks);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 45;
				context_block();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LOCAL || _la==REMOTE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Context_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Remote_context_blockContext remote_context_block() {
			return GetRuleContext<Remote_context_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_context_blockContext local_context_block() {
			return GetRuleContext<Local_context_blockContext>(0);
		}
		public Context_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContext_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Context_blockContext context_block() {
		Context_blockContext _localctx = new Context_blockContext(Context, State);
		EnterRule(_localctx, 8, RULE_context_block);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REMOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				remote_context_block();
				}
				break;
			case LOCAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				local_context_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_context_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(QLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selection_setContext selection_set() {
			return GetRuleContext<Selection_setContext>(0);
		}
		public Local_context_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_context_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_context_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_context_blockContext local_context_block() {
		Local_context_blockContext _localctx = new Local_context_blockContext(Context, State);
		EnterRule(_localctx, 10, RULE_local_context_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(LOCAL);
			State = 55;
			selection_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remote_context_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(QLParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_setContext selection_set() {
			return GetRuleContext<Selection_setContext>(0);
		}
		public Remote_context_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remote_context_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemote_context_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Remote_context_blockContext remote_context_block() {
		Remote_context_blockContext _localctx = new Remote_context_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_remote_context_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(REMOTE);
			State = 58;
			args();
			State = 59;
			selection_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(QLParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(QLParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectionContext[] selection() {
			return GetRuleContexts<SelectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionContext selection(int i) {
			return GetRuleContext<SelectionContext>(i);
		}
		public Selection_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_setContext selection_set() {
		Selection_setContext _localctx = new Selection_setContext(Context, State);
		EnterRule(_localctx, 14, RULE_selection_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(LBRACE);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 62;
				selection();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 67;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(Context, State);
		EnterRule(_localctx, 16, RULE_selection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			field();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransformationsContext transformations() {
			return GetRuleContext<TransformationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_setContext selection_set() {
			return GetRuleContext<Selection_setContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 18, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(NAME);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 72;
				args();
				}
			}

			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PIPE) {
				{
				State = 75;
				transformations();
				}
			}

			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 78;
				selection_set();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(QLParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(QLParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QLParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 20, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(LPAREN);
			State = 82;
			arg();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 83;
				Match(COMMA);
				State = 84;
				arg();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QLParser.COLON, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 22, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 92;
				Match(NAME);
				State = 93;
				Match(COLON);
				}
			}

			State = 96;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransformationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransformationContext[] transformation() {
			return GetRuleContexts<TransformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransformationContext transformation(int i) {
			return GetRuleContext<TransformationContext>(i);
		}
		public TransformationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transformations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransformations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransformationsContext transformations() {
		TransformationsContext _localctx = new TransformationsContext(Context, State);
		EnterRule(_localctx, 24, RULE_transformations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 98;
				transformation();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==PIPE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(QLParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public TransformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransformationContext transformation() {
		TransformationContext _localctx = new TransformationContext(Context, State);
		EnterRule(_localctx, 26, RULE_transformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(PIPE);
			State = 104;
			Match(NAME);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 105;
				args();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(QLParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(QLParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(QLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(QLParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QLParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_value);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				Match(VARIABLE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110;
				Match(STRING);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 111;
				Match(BOOLEAN);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 112;
				Match(NULL);
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 113;
				list();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 114;
				@object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(QLParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(QLParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 30, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(LBRACK);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 339984384L) != 0)) {
				{
				{
				State = 118;
				value();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 124;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_fieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(QLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Object_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_fieldContext object_field() {
		Object_fieldContext _localctx = new Object_fieldContext(Context, State);
		EnterRule(_localctx, 32, RULE_object_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(NAME);
			State = 127;
			Match(COLON);
			State = 128;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(QLParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(QLParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_fieldContext[] object_field() {
			return GetRuleContexts<Object_fieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_fieldContext object_field(int i) {
			return GetRuleContext<Object_fieldContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLVisitor<TResult> typedVisitor = visitor as IQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 34, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(LBRACE);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME) {
				{
				{
				State = 131;
				object_field();
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 137;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,31,140,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,
		4,3,47,8,3,11,3,12,3,48,1,4,1,4,3,4,53,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
		1,7,1,7,4,7,64,8,7,11,7,12,7,65,1,7,1,7,1,8,1,8,1,9,1,9,3,9,74,8,9,1,9,
		3,9,77,8,9,1,9,3,9,80,8,9,1,10,1,10,1,10,1,10,5,10,86,8,10,10,10,12,10,
		89,9,10,1,10,1,10,1,11,1,11,3,11,95,8,11,1,11,1,11,1,12,4,12,100,8,12,
		11,12,12,12,101,1,13,1,13,1,13,3,13,107,8,13,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,3,14,116,8,14,1,15,1,15,5,15,120,8,15,10,15,12,15,123,9,15,1,
		15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,5,17,133,8,17,10,17,12,17,136,9,
		17,1,17,1,17,1,17,0,0,18,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,0,0,139,0,36,1,0,0,0,2,38,1,0,0,0,4,40,1,0,0,0,6,46,1,0,0,0,8,52,1,
		0,0,0,10,54,1,0,0,0,12,57,1,0,0,0,14,61,1,0,0,0,16,69,1,0,0,0,18,71,1,
		0,0,0,20,81,1,0,0,0,22,94,1,0,0,0,24,99,1,0,0,0,26,103,1,0,0,0,28,115,
		1,0,0,0,30,117,1,0,0,0,32,126,1,0,0,0,34,130,1,0,0,0,36,37,3,4,2,0,37,
		1,1,0,0,0,38,39,5,13,0,0,39,3,1,0,0,0,40,41,3,2,1,0,41,42,5,26,0,0,42,
		43,3,6,3,0,43,44,5,27,0,0,44,5,1,0,0,0,45,47,3,8,4,0,46,45,1,0,0,0,47,
		48,1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,7,1,0,0,0,50,53,3,12,6,0,51,
		53,3,10,5,0,52,50,1,0,0,0,52,51,1,0,0,0,53,9,1,0,0,0,54,55,5,1,0,0,55,
		56,3,14,7,0,56,11,1,0,0,0,57,58,5,2,0,0,58,59,3,20,10,0,59,60,3,14,7,0,
		60,13,1,0,0,0,61,63,5,26,0,0,62,64,3,16,8,0,63,62,1,0,0,0,64,65,1,0,0,
		0,65,63,1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,0,67,68,5,27,0,0,68,15,1,0,0,
		0,69,70,3,18,9,0,70,17,1,0,0,0,71,73,5,13,0,0,72,74,3,20,10,0,73,72,1,
		0,0,0,73,74,1,0,0,0,74,76,1,0,0,0,75,77,3,24,12,0,76,75,1,0,0,0,76,77,
		1,0,0,0,77,79,1,0,0,0,78,80,3,14,7,0,79,78,1,0,0,0,79,80,1,0,0,0,80,19,
		1,0,0,0,81,82,5,24,0,0,82,87,3,22,11,0,83,84,5,31,0,0,84,86,3,22,11,0,
		85,83,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,
		89,87,1,0,0,0,90,91,5,25,0,0,91,21,1,0,0,0,92,93,5,13,0,0,93,95,5,23,0,
		0,94,92,1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,97,3,28,14,0,97,23,1,0,
		0,0,98,100,3,26,13,0,99,98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,
		102,1,0,0,0,102,25,1,0,0,0,103,104,5,30,0,0,104,106,5,13,0,0,105,107,3,
		20,10,0,106,105,1,0,0,0,106,107,1,0,0,0,107,27,1,0,0,0,108,116,5,22,0,
		0,109,116,5,17,0,0,110,116,5,16,0,0,111,116,5,14,0,0,112,116,5,15,0,0,
		113,116,3,30,15,0,114,116,3,34,17,0,115,108,1,0,0,0,115,109,1,0,0,0,115,
		110,1,0,0,0,115,111,1,0,0,0,115,112,1,0,0,0,115,113,1,0,0,0,115,114,1,
		0,0,0,116,29,1,0,0,0,117,121,5,28,0,0,118,120,3,28,14,0,119,118,1,0,0,
		0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,
		121,1,0,0,0,124,125,5,29,0,0,125,31,1,0,0,0,126,127,5,13,0,0,127,128,5,
		23,0,0,128,129,3,28,14,0,129,33,1,0,0,0,130,134,5,26,0,0,131,133,3,32,
		16,0,132,131,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,
		137,1,0,0,0,136,134,1,0,0,0,137,138,5,27,0,0,138,35,1,0,0,0,13,48,52,65,
		73,76,79,87,94,101,106,115,121,134
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
