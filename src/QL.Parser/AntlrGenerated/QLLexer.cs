//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/rszemplinski/projects/dotnet/QLShell/QL.Parser/QL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class QLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LOCAL=1, REMOTE=2, WS=3, COMMENT=4, LINE_TERMINATOR=5, UNICODE_SCALAR_VALUE_HEX=6, 
		LETTERS=7, EXP=8, HEX=9, UNICODE=10, ESC=11, NAME_START=12, NAME=13, BOOLEAN=14, 
		NULL=15, STRING=16, NUMBER=17, FLOAT=18, FRACTIONAL=19, EXPONENT=20, INT=21, 
		VARIABLE=22, COLON=23, LPAREN=24, RPAREN=25, LBRACE=26, RBRACE=27, LBRACK=28, 
		RBRACK=29, PIPE=30, COMMA=31;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LOCAL", "REMOTE", "WS", "COMMENT", "LINE_TERMINATOR", "UNICODE_SCALAR_VALUE_HEX", 
		"LETTERS", "EXP", "HEX", "UNICODE", "ESC", "NAME_START", "NAME", "BOOLEAN", 
		"NULL", "STRING", "NUMBER", "FLOAT", "FRACTIONAL", "EXPONENT", "INT", 
		"VARIABLE", "COLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
		"RBRACK", "PIPE", "COMMA"
	};


	public QLLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public QLLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'local'", "'remote'", null, null, null, null, null, null, null, 
		null, null, null, null, null, "'null'", null, null, null, null, null, 
		null, null, "':'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'|'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LOCAL", "REMOTE", "WS", "COMMENT", "LINE_TERMINATOR", "UNICODE_SCALAR_VALUE_HEX", 
		"LETTERS", "EXP", "HEX", "UNICODE", "ESC", "NAME_START", "NAME", "BOOLEAN", 
		"NULL", "STRING", "NUMBER", "FLOAT", "FRACTIONAL", "EXPONENT", "INT", 
		"VARIABLE", "COLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
		"RBRACK", "PIPE", "COMMA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 5 : UNICODE_SCALAR_VALUE_HEX_action(_localctx, actionIndex); break;
		}
	}
	private void UNICODE_SCALAR_VALUE_HEX_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: break;
		}
	}

	private static int[] _serializedATN = {
		4,0,31,222,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,2,4,2,78,8,2,11,2,12,2,79,1,2,1,2,1,3,1,3,5,3,86,8,3,10,3,12,3,
		89,9,3,1,3,1,3,1,4,1,4,1,4,3,4,96,8,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,3,7,
		105,8,7,1,7,4,7,108,8,7,11,7,12,7,109,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,10,1,10,1,10,3,10,125,8,10,1,11,1,11,1,12,1,12,5,12,131,8,12,
		10,12,12,12,134,9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,
		145,8,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,155,8,15,10,15,12,
		15,158,9,15,1,15,1,15,1,16,1,16,3,16,164,8,16,1,17,1,17,1,17,1,17,1,17,
		1,17,3,17,172,8,17,1,18,1,18,4,18,176,8,18,11,18,12,18,177,1,19,1,19,3,
		19,182,8,19,1,19,4,19,185,8,19,11,19,12,19,186,1,20,3,20,190,8,20,1,20,
		1,20,1,20,5,20,195,8,20,10,20,12,20,198,9,20,3,20,200,8,20,1,21,1,21,1,
		21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
		28,1,29,1,29,1,30,1,30,0,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
		19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
		43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,1,0,13,3,0,
		9,10,12,13,32,32,2,0,10,10,94,94,2,0,10,10,13,13,3,0,48,57,65,70,97,102,
		2,0,65,90,97,122,2,0,69,69,101,101,2,0,43,43,45,45,1,0,49,57,8,0,34,34,
		47,47,92,92,98,98,102,102,110,110,114,114,116,116,3,0,65,90,95,95,97,122,
		4,0,48,57,65,90,95,95,97,122,2,0,34,34,92,92,1,0,48,57,240,0,1,1,0,0,0,
		0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
		0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
		25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
		0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
		0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,69,1,0,0,0,5,77,1,0,0,
		0,7,83,1,0,0,0,9,95,1,0,0,0,11,97,1,0,0,0,13,100,1,0,0,0,15,102,1,0,0,
		0,17,111,1,0,0,0,19,113,1,0,0,0,21,124,1,0,0,0,23,126,1,0,0,0,25,128,1,
		0,0,0,27,144,1,0,0,0,29,146,1,0,0,0,31,151,1,0,0,0,33,163,1,0,0,0,35,165,
		1,0,0,0,37,173,1,0,0,0,39,179,1,0,0,0,41,189,1,0,0,0,43,201,1,0,0,0,45,
		204,1,0,0,0,47,206,1,0,0,0,49,208,1,0,0,0,51,210,1,0,0,0,53,212,1,0,0,
		0,55,214,1,0,0,0,57,216,1,0,0,0,59,218,1,0,0,0,61,220,1,0,0,0,63,64,5,
		108,0,0,64,65,5,111,0,0,65,66,5,99,0,0,66,67,5,97,0,0,67,68,5,108,0,0,
		68,2,1,0,0,0,69,70,5,114,0,0,70,71,5,101,0,0,71,72,5,109,0,0,72,73,5,111,
		0,0,73,74,5,116,0,0,74,75,5,101,0,0,75,4,1,0,0,0,76,78,7,0,0,0,77,76,1,
		0,0,0,78,79,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,81,1,0,0,0,81,82,6,
		2,0,0,82,6,1,0,0,0,83,87,5,35,0,0,84,86,8,1,0,0,85,84,1,0,0,0,86,89,1,
		0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,0,0,0,90,91,5,
		10,0,0,91,8,1,0,0,0,92,93,5,13,0,0,93,96,5,10,0,0,94,96,7,2,0,0,95,92,
		1,0,0,0,95,94,1,0,0,0,96,10,1,0,0,0,97,98,7,3,0,0,98,99,6,5,1,0,99,12,
		1,0,0,0,100,101,7,4,0,0,101,14,1,0,0,0,102,104,7,5,0,0,103,105,7,6,0,0,
		104,103,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,108,7,7,0,0,107,106,
		1,0,0,0,108,109,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,16,1,0,0,0,
		111,112,7,3,0,0,112,18,1,0,0,0,113,114,5,92,0,0,114,115,5,117,0,0,115,
		116,1,0,0,0,116,117,3,17,8,0,117,118,3,17,8,0,118,119,3,17,8,0,119,120,
		3,17,8,0,120,20,1,0,0,0,121,122,5,92,0,0,122,125,7,8,0,0,123,125,3,19,
		9,0,124,121,1,0,0,0,124,123,1,0,0,0,125,22,1,0,0,0,126,127,7,9,0,0,127,
		24,1,0,0,0,128,132,3,23,11,0,129,131,7,10,0,0,130,129,1,0,0,0,131,134,
		1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,26,1,0,0,0,134,132,1,0,0,0,
		135,136,5,116,0,0,136,137,5,114,0,0,137,138,5,117,0,0,138,145,5,101,0,
		0,139,140,5,102,0,0,140,141,5,97,0,0,141,142,5,108,0,0,142,143,5,115,0,
		0,143,145,5,101,0,0,144,135,1,0,0,0,144,139,1,0,0,0,145,28,1,0,0,0,146,
		147,5,110,0,0,147,148,5,117,0,0,148,149,5,108,0,0,149,150,5,108,0,0,150,
		30,1,0,0,0,151,156,5,34,0,0,152,155,3,21,10,0,153,155,8,11,0,0,154,152,
		1,0,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,
		0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,5,34,0,0,160,32,1,0,0,0,161,
		164,3,35,17,0,162,164,3,41,20,0,163,161,1,0,0,0,163,162,1,0,0,0,164,34,
		1,0,0,0,165,171,3,41,20,0,166,167,3,37,18,0,167,168,3,39,19,0,168,172,
		1,0,0,0,169,172,3,37,18,0,170,172,3,39,19,0,171,166,1,0,0,0,171,169,1,
		0,0,0,171,170,1,0,0,0,172,36,1,0,0,0,173,175,5,46,0,0,174,176,7,12,0,0,
		175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,38,
		1,0,0,0,179,181,7,5,0,0,180,182,7,6,0,0,181,180,1,0,0,0,181,182,1,0,0,
		0,182,184,1,0,0,0,183,185,7,12,0,0,184,183,1,0,0,0,185,186,1,0,0,0,186,
		184,1,0,0,0,186,187,1,0,0,0,187,40,1,0,0,0,188,190,5,45,0,0,189,188,1,
		0,0,0,189,190,1,0,0,0,190,199,1,0,0,0,191,200,5,48,0,0,192,196,7,7,0,0,
		193,195,7,12,0,0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,
		1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,199,191,1,0,0,0,199,192,1,0,0,
		0,200,42,1,0,0,0,201,202,5,36,0,0,202,203,3,25,12,0,203,44,1,0,0,0,204,
		205,5,58,0,0,205,46,1,0,0,0,206,207,5,40,0,0,207,48,1,0,0,0,208,209,5,
		41,0,0,209,50,1,0,0,0,210,211,5,123,0,0,211,52,1,0,0,0,212,213,5,125,0,
		0,213,54,1,0,0,0,214,215,5,91,0,0,215,56,1,0,0,0,216,217,5,93,0,0,217,
		58,1,0,0,0,218,219,5,124,0,0,219,60,1,0,0,0,220,221,5,44,0,0,221,62,1,
		0,0,0,19,0,79,87,95,104,109,124,132,144,154,156,163,171,177,181,186,189,
		196,199,2,6,0,0,1,5,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
